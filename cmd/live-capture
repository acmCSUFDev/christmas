#!/usr/bin/env bash
self="$(basename "$0")"

init() {
	[[ -e camerarc ]] \
		|| fatal "No camerarc file found. Please create one."

	curenv=$(declare -p -x)
	source camerarc
	eval "$curenv"

	assertEnv CAMERA
	assertEnv FORMAT
	assertEnv SIZE

	[[ "$CAMERA" == /dev/video* ]] \
		|| fatal "Camera must be a video device"

	[[ "$SIZE" == *x* ]] \
		|| fatal "Size must be in the format <width>x<height>"
}

start() {
	local imageDest="$1"

	[[ "$imageDest" ]] \
		|| fatal "Usage: $self start <imageDest> [filters...]"

	[[ "$imageDest" == *.bmp ]] \
		|| fatal "Image destination must be a BMP file"

	log "Using $imageDest as image destination."
	log "To read a frame, open this file and use that file descriptor."

	ffmpeg \
		-hide_banner -loglevel error -y \
		-f video4linux2 \
			-framerate "$FRAMERATE" \
			-video_size "$SIZE" \
			-pixel_format "$FORMAT" \
			-i "$CAMERA" \
		"${@:3}" \
		-f image2 -update 1 "$imageDest"
	rm "$imageDest"
}

wait() {
	local imageDest="$1"

	[[ "$imageDest" ]] \
		|| fatal "Usage: $self wait <imageDest>"

	[[ "$imageDest" == *.bmp ]] \
		|| fatal "Image destination must be a BMP file"

	log "Waiting for $imageDest to be updated..."

	while [[ ! -s "$imageDest" ]]; do
		sleep 0.05
	done
}

snapshot() {
	local imageDest="$1"
	local snapshotDest="$2"

	[[ "$imageDest" || "$snapshotDest" ]] \
		|| fatal "Usage: $self snapshot <imageDest> <snapshotDest>"

	[[ "$imageDest" == *.bmp ]] \
		|| fatal "Image destination must be a BMP file"

	if [[ "$snapshotDest" == *.bmp ]]; then
		# Same extension, so we can just rename the file.
		while ! cp "$imageDest" "$snapshotDest"; do
			sleep 0.05
		done
		return
	fi

	# Different extension, so we need to convert the file.
	tmpdir="$(mktemp -d)"
	while ! cp "$imageDest" "$tmpdir/snapshot.bmp"; do
		sleep 0.05
	done

	ffmpeg \
		-hide_banner -loglevel error -y \
		-i "$tmpdir/snapshot.bmp" \
		"$snapshotDest"
	rm -r "$tmpdir"
}

view() {
	local imageDest="$1"

	[[ "$imageDest" ]] \
		|| fatal "Usage: $self view <imageDest>"

	[[ "$imageDest" == *.bmp ]] \
		|| fatal "Image destination must be a BMP file"

	tmpdir="$(dirname "$imageDest")"
	tmpname="$(basename "$imageDest")"
	tmpname="${tmpname%.*}"

	snapshot "$imageDest" "$tmpdir/$tmpname.snapshot.bmp"
	xdg-open "$tmpdir/$tmpname.snapshot.bmp"
}

log() {
	echo "$@" >&2
}

fatal() {
	log "$@"
	exit 1
}

assertEnv() {
	local var="$1"
	local val="${!var}"
	[[ "$val" ]] \
		|| fatal "Environment variable $var is not set"
	log "Using $var=$val"
}

init

case "$1" in
start)
	shift
	start "$@"
	;;
wait)
	shift
	wait "$@"
	;;
snapshot)
	shift
	snapshot "$@"
	;;
view)
	shift
	view "$@"
	;;
*)
	fatal "Usage: $self <start|wait|snapshot> <args...>"
	;;
esac
